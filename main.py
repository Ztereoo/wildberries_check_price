import json
import os
import sys
import threading
import time
import string

import cloudscraper
import telebot
from telebot import types

from config import TOKEN

bot = telebot.TeleBot(TOKEN)
data = {}
data_from_user = {}
user_price = {}


scraper = cloudscraper.create_scraper(
    browser={
        'browser': 'chrome',
        'platform': 'android',
        'desktop': False
    }
)

cookies = {
    '__Secure-ab-group': '46;',
    'ob_theme': 'DARK;',
    'ADDRESSBOOKBAR_WEB_CLARIFICATION': '1716216895;',
    'is_cookies_accepted': '1;',
    'xcid': 'af3e5f0ce15183783bfe1512b44f9fca;',
    'is_adult_confirmed': 'true;',
    'rfuid': 'NjkyNDcyNDUyLDEyNC4wNDM0NjYwNzExNDcxMiwtMjc5NTk3MzQzLC0xLC0xNTg0NDY5MTQxLFczc2libUZ0WlNJNklsQkVSaUJXYVdWM'
             '1pYSWlMQ0prWlhOamNtbHdkR2x2YmlJNklsQnZjblJoWW14bElFUnZZM1Z0Wlc1MElFWnZjbTFoZENJc0ltMXBiV1ZVZVhCbGN5STZXM3N'
             'pZEhsd1pTSTZJbUZ3Y0d4cFkyRjBhVzl1TDNCa1ppSXNJbk4xWm1acGVHVnpJam9pY0dSbUluMHNleUowZVhCbElqb2lkR1Y0ZEM5d1pHW'
             'WlMQ0p6ZFdabWFYaGxjeUk2SW5Ca1ppSjlYWDBzZXlKdVlXMWxJam9pUTJoeWIyMWxJRkJFUmlCV2FXVjNaWElpTENKa1pYTmpjbWx3ZEd'
             'sdmJpSTZJbEJ2Y25SaFlteGxJRVJ2WTNWdFpXNTBJRVp2Y20xaGRDSXNJbTFwYldWVWVYQmxjeUk2VzNzaWRIbHdaU0k2SW1Gd2NHeHBZM'
             'kYwYVc5dUwzQmtaaUlzSW5OMVptWnBlR1Z6SWpvaWNHUm1JbjBzZXlKMGVYQmxJam9pZEdWNGRDOXdaR1lpTENKemRXWm1hWGhsY3lJNkl'
             'uQmtaaUo5WFgwc2V5SnVZVzFsSWpvaVEyaHliMjFwZFcwZ1VFUkdJRlpwWlhkbGNpSXNJbVJsYzJOeWFYQjBhVzl1SWpvaVVHOXlkR0ZpY'
             'kdVZ1JHOWpkVzFsYm5RZ1JtOXliV0YwSWl3aWJXbHRaVlI1Y0dWeklqcGJleUowZVhCbElqb2lZWEJ3YkdsallYUnBiMjR2Y0dSbUlpd2l'
             'jM1ZtWm1sNFpYTWlPaUp3WkdZaWZTeDdJblI1Y0dVaU9pSjBaWGgwTDNCa1ppSXNJbk4xWm1acGVHVnpJam9pY0dSbUluMWRmU3g3SW01a'
             'GJXVWlPaUpOYVdOeWIzTnZablFnUldSblpTQlFSRVlnVm1sbGQyVnlJaXdpWkdWelkzSnBjSFJwYjI0aU9pSlFiM0owWVdKc1pTQkViMk4'
             'xYldWdWRDQkdiM0p0WVhRaUxDSnRhVzFsVkhsd1pYTWlPbHQ3SW5SNWNHVWlPaUpoY0hCc2FXTmhkR2x2Ymk5d1pHWWlMQ0p6ZFdabWFYa'
             'GxjeUk2SW5Ca1ppSjlMSHNpZEhsd1pTSTZJblJsZUhRdmNHUm1JaXdpYzNWbVptbDRaWE1pT2lKd1pHWWlmVjE5TEhzaWJtRnRaU0k2SWx'
             'kbFlrdHBkQ0JpZFdsc2RDMXBiaUJRUkVZaUxDSmtaWE5qY21sd2RHbHZiaUk2SWxCdmNuUmhZbXhsSUVSdlkzVnRaVzUwSUVadmNtMWhkQ'
             '0lzSW0xcGJXVlVlWEJsY3lJNlczc2lkSGx3WlNJNkltRndjR3hwWTJGMGFXOXVMM0JrWmlJc0luTjFabVpwZUdWeklqb2ljR1JtSW4wc2V'
             '5SjBlWEJsSWpvaWRHVjRkQzl3WkdZaUxDSnpkV1ptYVhobGN5STZJbkJrWmlKOVhYMWQsV3lKeWRTSmQsMCwxLDAsMzAsMTQyNzUsOCwyM'
             'jcxMjY1MjAsMCwxLDAsLTQ5MTI3NTUyMyxSMjl2WjJ4bElFbHVZeTRnVG1WMGMyTmhjR1VnUjJWamEyOGdUV0ZqU1c1MFpXd2dOUzR3SUN'
             'oTllXTnBiblJ2YzJnN0lFbHVkR1ZzSUUxaFl5QlBVeUJZSURFd1h6RTFYemNwSUVGd2NHeGxWMlZpUzJsMEx6VXpOeTR6TmlBb1MwaFVUV'
             'XdzSUd4cGEyVWdSMlZqYTI4cElFTm9jbTl0WlM4eE1qQXVNQzR3TGpBZ1dXRkNjbTkzYzJWeUx6STBMakV1TUM0d0lGTmhabUZ5YVM4MU1'
             '6Y3VNellnTWpBd016QXhNRGNnVFc5NmFXeHNZUT09LGV5SmphSEp2YldVaU9uc2lZWEJ3SWpwN0ltbHpTVzV6ZEdGc2JHVmtJanBtWVd4e'
             'lpTd2lTVzV6ZEdGc2JGTjBZWFJsSWpwN0lrUkpVMEZDVEVWRUlqb2laR2x6WVdKc1pXUWlMQ0pKVGxOVVFVeE1SVVFpT2lKcGJuTjBZV3hz'
             'WldRaUxDSk9UMVJmU1U1VFZFRk1URVZFSWpvaWJtOTBYMmx1YzNSaGJHeGxaQ0o5TENKU2RXNXVhVzVuVTNSaGRHVWlPbnNpUTBGT1RrOV'
             'VYMUpWVGlJNkltTmhibTV2ZEY5eWRXNGlMQ0pTUlVGRVdWOVVUMTlTVlU0aU9pSnlaV0ZrZVY5MGIxOXlkVzRpTENKU1ZVNU9TVTVISWpva'
             'WNuVnVibWx1WnlKOWZTd2lhVEU0YmlJNmUzMTlMQ0o1WVc1a1pYZ2lPbnNpYldWa2FXRWlPbnQ5TENKeVpXRmtZV0pwYkdsMGVTSTZlMzBz'
             'SW5CMVlteHBZMFpsWVhSMWNtVWlPbnNpVkhWeVltOUJjSEJUZEdGMFpTSTZleUpJUVZOZlFrVlVWRVZTWDFaRlVsTkpUMDRpT2lKb1lYTkN'
             'aWFIwWlhKV1pYSnphVzl1SWl3aVNVNWZVRkpQUjBWVFV5STZJbWx1VUhKdloyVnpjeUlzSWtsT1UxUkJURXhCVkVsUFRsOUZVbEpQVWlJNk'
             'ltbHVjM1JoYkd4aGRHbHZia1Z5Y205eUlpd2lUa0ZXU1VkQlZFbFBUbDlVVDE5VlRrdE9UMWRPWDBGUVVFeEpRMEZVU1U5T0lqb2libUYyY'
             'VdkaGRHbHZibFJ2Vlc1cmJtOTNia0Z3Y0d4cFkyRjBhVzl1SWl3aVRrOVVYMGxPVTFSQlRFeEZSQ0k2SW01dmRFbHVjM1JoYkd4bFpDSXNJb'
             'EpGUVVSWlgwWlBVbDlWVTBVaU9pSnlaV0ZrZVVadmNsVnpaU0o5ZlgxOSw2NSwtMTI4NTU1MTMsMSwxLC0xLDE2OTk5NTQ4ODcsMTY5OTk1N'
             'Dg4Nyw2MzU3ODA1MjYsOA', }


def get_data_from_wb(chat_id):

    try:
        html = scraper.get(
            f"https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest=-1257786&spp="
            f"30&nm={data_from_user[chat_id]['articul']}",
            cookies=cookies).text
        res = json.loads(html)

    except Exception as e:
        print(f'–°–∞–π—Ç wb –Ω–µ —Ä–∞–¥ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É, –æ—à–∏–±–∫–∞{e}')

    if res.get('data',{}).get('products',[])==[] or any('price' in item for item in res.get('data', {}).get('products', [])[0].get('sizes', {})) is False:
        return None

    else:
        items = res.get('data', {}).get('products', [])[0].get('sizes', {})
        items_with_price = [item for item in items if 'price' in item]
        wb_name = res.get('data', {}).get('products', [])[0]['name']
        wb_product_id = res.get('data', {}).get('products', [])[0]['id']
        wb_brand = res.get('data', {}).get('products', [])[0]['brand']
        wb_price = int(items_with_price[0]['price']['product'] / 100)

        data[chat_id] = {'chat_id': chat_id,
                         'wb_product_id': wb_product_id,
                         'wb_price': wb_price,
                         'wb_name': wb_name,
                         'wb_brand': wb_brand}


def get_price_from_wb(chat_id):
    try:
        html = scraper.get(
            f"https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest=-1257786&spp="
            f"30&nm={data_from_user[chat_id]['articul']}",
            cookies=cookies).text
        res = json.loads(html)

    except Exception as e:
        print(f'–°–∞–π—Ç wb –Ω–µ —Ä–∞–¥ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É, –æ—à–∏–±–∫–∞{e}')


    if res.get('data',{}).get('products',[])==[] or any('price' in item for item in res.get('data', {}).get('products', [])[0].get('sizes', {})) is False:
        return None
    else:
        items = res.get('data', {}).get('products', [])[0].get('sizes', {})
        items_with_price = [item for item in items if 'price' in item]
        wb_price = int(items_with_price[0]['price']['product'] / 100)
        return wb_price

@bot.message_handler(commands=['start'])
def start(message):

    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç,\n–Ω–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –ø–æ–∫—É–ø–∫–∞—Ö Wildberries üòé')
    time.sleep(1)
    bot.send_message(message.chat.id, f'–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:')
    time.sleep(1)
    bot.send_message(message.chat.id, f'–≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∞–π—Ç–µ Wildberries, –Ω–∞–ø—Ä–∏–º–µ—Ä\n<b>171620775</b>',
                     parse_mode='HTML')
    bot.register_next_step_handler(message, get_data_from_user)


@bot.message_handler(commands=['restart'])
def restart_bot(message):
    bot.reply_to(message, "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è...")
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –µ—â–µ —Ä–∞–∑')
    os.execv(sys.executable, ['python'] + sys.argv)


def get_data_from_user(message):
    reply = message.text
    chat_id = message.chat.id
    if any(char.isalpha() for char in reply):
        bot.send_message(chat_id, f'–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –≤ –∞—Ä—Ç–∏–∫—É–ª–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        start(message)
    else:
        data_from_user[chat_id] = {'articul': reply}
        bot.send_message(chat_id, f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è üöÄÔ∏è')


        try:
            get_data_from_wb(chat_id)
            bot.send_message(chat_id,
                             f"–ù–∞—à–ª–∏ –≤–∞—à —Ç–æ–≤–∞—Ä, —ç—Ç–æ:\n–ú–æ–¥–µ–ª—å-{data[chat_id]['wb_name']}\n–ë—Ä–µ–Ω–¥-{data[chat_id]['wb_brand']}"
                             f"\n–ê—Ä—Ç–∏–∫—É–ª-{data[chat_id]['wb_product_id']}\n–¶–µ–Ω–∞-{data[chat_id]['wb_price']}")
            bot.send_message(chat_id,
                             f'–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ, –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ\n–≤–≤–µ–¥–∏—Ç–µ <b>–î–∞</b>,\n—Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä?\n–≤–≤–µ–¥–∏—Ç–µ<b> –ó–∞–º–µ–Ω–∞</b>',
                             parse_mode='HTML')
            bot.register_next_step_handler(message, nextstep)
        except KeyError as e:
            print(f'–æ—à–∏–±–∫–∞ {e}')
            bot.send_message(chat_id, f'–ü–æ—Ö–æ–∂–µ –Ω–∞ WB –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –∏–ª–∏ –æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
            time.sleep(2)
            start(message)


def nextstep(message):
    reply = message.text.lower()
    if reply == '–¥–∞':
        print(data[message.chat.id])
        bot.send_message(message.chat.id,
                         f'–°–µ–π—á–∞—Å –≤–∞—à —Ç–æ–≤–∞—Ä —Å—Ç–æ–∏—Ç: <b>{data[message.chat.id]["wb_price"]}‚ÇΩ</b>\n–Ω–æ –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å '
                         f'–¥–Ω–∏ –∫–æ–≥–¥–∞ –æ–Ω —Å—Ç–æ–∏—Ç –¥–µ—à–µ–≤–ª–µ',
                         parse_mode='HTML')
        bot.send_message(message.chat.id,
                         f'–ù–∞–ø—Ä–∏–º–µ—Ä –°—Ç–∏—Ä–∞–ª—å–Ω–æ-—Å—É—à–∏–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ Beko —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º 119998055 –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ —Å—Ç–æ–∏–ª–∞ –Ω–∞ '
                         f'<b>2215</b> —Ä—É–±–ª–µ–π –¥–µ—à–µ–≤–ª–µ',
                         parse_mode='HTML')
        time.sleep(1)
        bot.send_message(message.chat.id,
                         f'–±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ- –æ –ª—é–±–æ–º —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–õ—é–±–æ–µ '
                         f'—Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>',
                         parse_mode='HTML')
        bot.send_message(message.chat.id,
                         f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ\n<b>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–∞—à—É —Ü–µ–Ω—É</b>, –∏ –¥–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ'
                         f'\n<b>–£–∫–∞–∂—É —Å—É–º–º—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>',
                         parse_mode='HTML')
        time.sleep(1)

        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_1 = types.InlineKeyboardButton('–õ—é–±–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã', callback_data='price_down')
        btn_2 = types.InlineKeyboardButton('–£–∫–∞–∂—É —Å—É–º–º—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ', callback_data='user_price_down')
        markup.add(btn_1, btn_2)
        bot.send_message(message.chat.id, f'–ß—Ç–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?', reply_markup=markup)
        # bot.register_next_step_handler(message, get_user_price)
    elif reply=='–∑–∞–º–µ–Ω–∞':
        start(message)
    else:
        bot.send_message(message.chat.id,f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
        start(message)


def check_price_down(chat_id):
    wb_price = get_price_from_wb(chat_id)
    if wb_price is None:
        bot.send_message(chat_id,f'—É–ø—Å.. –∫–∞–∂–µ—Ç—Å—è —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
        start(message)
    else:
        while True:
            bot.send_message(chat_id,
                             f"—Ü–µ–Ω–∞ wb {wb_price}, —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ {data[chat_id]['wb_price']},–Ω–∞—à —Ç–æ–≤–∞—Ä{data[chat_id]}")
            for i in data:
                if wb_price < data[chat_id]['wb_price']:
                    bot.send_message(i,
                                     f"–£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å!\n –¶–µ–Ω–∞ —Å—Ç–∞–ª–∞ –Ω–∏–∂–µ,\n—Ç–µ–ø–µ—Ä—å {wb_price}‚ÇΩ –≤–º–µ—Å—Ç–æ {data[i]['wb_price']}‚ÇΩ ")
                    data[chat_id]['wb_price'] = wb_price
                    bot.send_message(chat_id, f"–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
                    break
            time.sleep(20)


def check_user_price_down(chat_id):
    user_price_compare = user_price[chat_id]
    wb_price = get_price_from_wb(chat_id)
    if wb_price is None:
        bot.send_message(chat_id,f'—É–ø—Å.. –∫–∞–∂–µ—Ç—Å—è —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
        start(message)

    else:
        while True:
            bot.send_message(chat_id, f"—Ü–µ–Ω–∞ wb {wb_price}, —Ü–µ–Ω–∞ —é–∑–µ—Ä–∞ {user_price_compare}, –Ω–∞—à —Ç–æ–≤–∞—Ä{data[chat_id]}")
            if wb_price < user_price_compare:
                bot.send_message(chat_id, f"–£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å! –¶–µ–Ω–∞ —Å—Ç–∞–ª–∞ –Ω–∏–∂–µ,\n—Ç–µ–ø–µ—Ä—å {wb_price}‚ÇΩ")
                bot.send_message(chat_id, f"–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
                break
            time.sleep(20)



@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.data == 'price_down':
        chat_id = call.message.chat.id
        bot.send_message(chat_id, f'–ú—ã –±—É–¥–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Ü–µ–Ω—É. –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è')
        bot.send_message(chat_id, f'–°—Ä–∞–≤–Ω–∏–≤–∞—é —Ü–µ–Ω—É —Å –¶–ï–ù–û–ô Wildberries')
        thread = threading.Thread(target=check_price_down, args=(chat_id,))
        thread.start()


    elif call.data == 'user_price_down':
        sent_msg = bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—É–º–º—É')
        bot.register_next_step_handler(sent_msg, price_reply)


def price_reply(message):
    chat_id = message.chat.id
    reply = message.text
    bot.send_message(chat_id, f'–≤–∞—à–∞ —Ü–µ–Ω–∞ {reply}')
    user_price[chat_id] = int(reply)
    user_price_compare = user_price[chat_id]
    bot.send_message(chat_id,
                     f'–ú—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É —Ü–µ–Ω—É {user_price_compare}‚ÇΩ. –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ,–∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –Ω–∞ WB —Å—Ç–∞–Ω–µ—Ç '
                     f'–º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π')
    bot.send_message(chat_id, f'–°—Ä–∞–≤–Ω–∏–≤–∞—é —Ü–µ–Ω—É c –¶–ï–ù–û–ô —é–∑–µ—Ä–∞')
    thread2 = threading.Thread(target=check_user_price_down, args=(chat_id,))
    thread2.start()


print('bot working')
if __name__ == '__main__':
    bot.polling(none_stop=True)
